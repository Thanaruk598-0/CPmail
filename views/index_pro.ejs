<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reports - FormEase</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'kku-blue': '#1e40af',
                        'kku-blue-light': '#3b82f6',
                        'kku-blue-dark': '#1e3a8a'
                    }
                }
            }
        }
    </script>
    <style>
        body {
            box-sizing: border-box;
        }
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
        }
        .stats-card {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            transition: all 0.2s;
        }
        .stats-card:hover {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transform: translateY(-1px);
        }
        .filter-card {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .loading-spinner {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .slide-in {
            animation: slideIn 0.5s ease-out;
        }
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }
        .export-button {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            transition: all 0.2s;
        }
        .export-button:hover {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            transform: translateY(-1px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .chart-legend {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
            margin-top: 1rem;
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
        }
        .legend-color {
            width: 1rem;
            height: 1rem;
            border-radius: 0.25rem;
        }
        @media (max-width: 768px) {
            .chart-container {
                height: 300px;
            }
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        @media (max-width: 640px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body class="bg-gray-50 font-sans">
    <!-- Header -->
    <header class="bg-kku-blue text-white shadow-lg">
        <div class="container mx-auto px-4">
            <div class="flex items-center justify-between py-4">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-white rounded-full flex items-center justify-center">
                        <span class="text-kku-blue font-bold text-lg">F</span>
                    </div>
                    <div>
                        <h1 class="text-xl font-bold">FormEase</h1>
                        <p class="text-blue-200 text-sm">Faculty of Computer Science</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="hidden md:block text-right">
                        <p class="text-sm font-medium">Dr. Jane Smith</p>
                        <p class="text-blue-200 text-xs">Lecturer</p>
                    </div>
                    <button onclick="goToDashboard()" class="bg-kku-blue-light hover:bg-kku-blue-dark px-3 py-2 rounded-md text-sm font-medium transition-colors">
                        Dashboard
                    </button>
                    <button onclick="logout()" class="bg-kku-blue-light hover:bg-kku-blue-dark px-3 py-2 rounded-md text-sm font-medium transition-colors">
                        Logout
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="bg-white shadow-sm border-b">
        <div class="container mx-auto px-4">
            <div class="flex space-x-8 overflow-x-auto">
                <a href="#" onclick="goToDashboard()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    Dashboard
                </a>
                <a href="#" onclick="goToMyForms()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    My Forms
                </a>
                <a href="#" onclick="goToHistory()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    Form History
                </a>
                <a href="#" class="py-3 px-1 border-b-2 border-kku-blue text-kku-blue font-medium whitespace-nowrap">
                    Reports
                </a>
                <a href="#" onclick="goToProfile()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    Profile
                </a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-6">
        <!-- Page Header -->
        <div class="mb-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div>
                    <h2 class="text-2xl font-bold text-gray-900 mb-2">Reports & Analytics</h2>
                    <p class="text-gray-600">Comprehensive insights into form submissions and student activity.</p>
                </div>
                <div class="mt-4 sm:mt-0 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                    <button onclick="exportReport('csv')" class="export-button text-white px-4 py-2 rounded-md font-medium text-sm flex items-center justify-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        Export CSV
                    </button>
                    <button onclick="exportReport('pdf')" class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors font-medium text-sm flex items-center justify-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                        </svg>
                        Export PDF
                    </button>
                    <button onclick="refreshReports()" class="bg-kku-blue text-white px-4 py-2 rounded-md hover:bg-kku-blue-dark transition-colors font-medium text-sm flex items-center justify-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="filter-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Report Filters</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <!-- Date Range -->
                <div>
                    <label for="dateFrom" class="block text-sm font-medium text-gray-700 mb-2">
                        From Date
                    </label>
                    <input type="date" id="dateFrom" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent">
                </div>

                <div>
                    <label for="dateTo" class="block text-sm font-medium text-gray-700 mb-2">
                        To Date
                    </label>
                    <input type="date" id="dateTo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent">
                </div>

                <!-- Student Group -->
                <div>
                    <label for="studentGroup" class="block text-sm font-medium text-gray-700 mb-2">
                        Student Group
                    </label>
                    <select id="studentGroup" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent">
                        <option value="">All Groups</option>
                        <option value="cs-year1">CS Year 1</option>
                        <option value="cs-year2">CS Year 2</option>
                        <option value="cs-year3">CS Year 3</option>
                        <option value="cs-year4">CS Year 4</option>
                        <option value="graduate">Graduate Students</option>
                    </select>
                </div>

                <!-- Apply Filters Button -->
                <div class="flex items-end">
                    <button onclick="applyFilters()" class="w-full bg-kku-blue text-white px-4 py-2 rounded-md hover:bg-kku-blue-dark transition-colors font-medium">
                        Apply Filters
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="hidden text-center py-12">
            <div class="loading-spinner w-12 h-12 border-4 border-kku-blue border-t-transparent rounded-full mx-auto mb-4"></div>
            <p class="text-gray-600 text-lg">Loading report data...</p>
        </div>

        <!-- Summary Statistics -->
        <div id="statsContainer" class="stats-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="stats-card">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-100 mr-4">
                        <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                    </div>
                    <div>
                        <p class="text-2xl font-bold text-gray-900" id="totalSubmissions">156</p>
                        <p class="text-sm text-gray-600">Total Submissions</p>
                        <p class="text-xs text-green-600 font-medium">+12% from last month</p>
                    </div>
                </div>
            </div>

            <div class="stats-card">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-yellow-100 mr-4">
                        <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div>
                        <p class="text-2xl font-bold text-gray-900" id="pendingReview">23</p>
                        <p class="text-sm text-gray-600">Pending Review</p>
                        <p class="text-xs text-yellow-600 font-medium">Requires attention</p>
                    </div>
                </div>
            </div>

            <div class="stats-card">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-100 mr-4">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div>
                        <p class="text-2xl font-bold text-gray-900" id="approvalRate">87%</p>
                        <p class="text-sm text-gray-600">Approval Rate</p>
                        <p class="text-xs text-green-600 font-medium">+3% improvement</p>
                    </div>
                </div>
            </div>

            <div class="stats-card">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-purple-100 mr-4">
                        <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                    </div>
                    <div>
                        <p class="text-2xl font-bold text-gray-900" id="activeStudents">89</p>
                        <p class="text-sm text-gray-600">Active Students</p>
                        <p class="text-xs text-purple-600 font-medium">This month</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Submissions by Type Chart -->
            <div class="stats-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Submissions by Type</h3>
                    <div class="flex space-x-2">
                        <button onclick="changeChartType('submissionsByType', 'doughnut')" class="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
                            Pie
                        </button>
                        <button onclick="changeChartType('submissionsByType', 'bar')" class="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
                            Bar
                        </button>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="submissionsByTypeChart"></canvas>
                </div>
            </div>

            <!-- Submissions by Status Chart -->
            <div class="stats-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Submissions by Status</h3>
                    <div class="flex space-x-2">
                        <button onclick="changeChartType('submissionsByStatus', 'doughnut')" class="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
                            Pie
                        </button>
                        <button onclick="changeChartType('submissionsByStatus', 'bar')" class="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
                            Bar
                        </button>
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="submissionsByStatusChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Trend Chart -->
        <div class="stats-card mb-8">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Submission Trends</h3>
                <div class="flex space-x-2">
                    <button onclick="changeTrendPeriod('week')" id="weekBtn" class="text-sm px-3 py-1 bg-kku-blue text-white rounded-md transition-colors">
                        Week
                    </button>
                    <button onclick="changeTrendPeriod('month')" id="monthBtn" class="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
                        Month
                    </button>
                    <button onclick="changeTrendPeriod('quarter')" id="quarterBtn" class="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
                        Quarter
                    </button>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="trendChart"></canvas>
            </div>
        </div>

        <!-- Student Group Performance -->
        <div class="stats-card mb-8">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Performance by Student Group</h3>
            <div class="chart-container">
                <canvas id="groupPerformanceChart"></canvas>
            </div>
        </div>

        <!-- Detailed Statistics Table -->
        <div class="stats-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Detailed Statistics</h3>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Form Type
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Total Submissions
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Approved
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Pending
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Rejected
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Approval Rate
                            </th>
                        </tr>
                    </thead>
                    <tbody id="statsTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Table rows will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <script>
        // Global variables for charts
        let submissionsByTypeChart = null;
        let submissionsByStatusChart = null;
        let trendChart = null;
        let groupPerformanceChart = null;
        let currentTrendPeriod = 'week';

        // Sample report data - replace with API calls
        let reportData = {
            summary: {
                totalSubmissions: 156,
                pendingReview: 23,
                approvalRate: 87,
                activeStudents: 89
            },
            submissionsByType: {
                'Leave Request': 45,
                'Course Evaluation': 38,
                'Registration': 32,
                'Research Proposal': 25,
                'IT Support': 16
            },
            submissionsByStatus: {
                'Approved': 98,
                'Pending': 23,
                'Under Review': 20,
                'Rejected': 15
            },
            trendData: {
                week: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    data: [12, 19, 15, 25, 22, 8, 5]
                },
                month: {
                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                    data: [45, 52, 38, 21]
                },
                quarter: {
                    labels: ['Jan', 'Feb', 'Mar'],
                    data: [156, 142, 98]
                }
            },
            groupPerformance: {
                'CS Year 1': { total: 42, approved: 38, pending: 3, rejected: 1 },
                'CS Year 2': { total: 38, approved: 32, pending: 4, rejected: 2 },
                'CS Year 3': { total: 35, approved: 30, pending: 3, rejected: 2 },
                'CS Year 4': { total: 28, approved: 25, pending: 2, rejected: 1 },
                'Graduate': { total: 13, approved: 11, pending: 1, rejected: 1 }
            }
        };

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            setupFilters();
            loadReportData();
        });

        // Setup filter event listeners
        function setupFilters() {
            // Set default date range (last 30 days)
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
            
            document.getElementById('dateTo').value = today.toISOString().split('T')[0];
            document.getElementById('dateFrom').value = thirtyDaysAgo.toISOString().split('T')[0];
        }

        // Load and render report data
        async function loadReportData() {
            try {
                showLoadingState(true);
                
                // Simulate API call
                await fetchReportingDataAPI();
                
                updateSummaryStats();
                renderCharts();
                renderStatsTable();
                
                showLoadingState(false);
            } catch (error) {
                showMessage('Error loading report data: ' + error.message, 'error');
                showLoadingState(false);
            }
        }

        // Update summary statistics
        function updateSummaryStats() {
            document.getElementById('totalSubmissions').textContent = reportData.summary.totalSubmissions;
            document.getElementById('pendingReview').textContent = reportData.summary.pendingReview;
            document.getElementById('approvalRate').textContent = reportData.summary.approvalRate + '%';
            document.getElementById('activeStudents').textContent = reportData.summary.activeStudents;
        }

        // Render all charts
        function renderCharts() {
            renderSubmissionsByTypeChart();
            renderSubmissionsByStatusChart();
            renderTrendChart();
            renderGroupPerformanceChart();
        }

        // Render submissions by type chart
        function renderSubmissionsByTypeChart() {
            const ctx = document.getElementById('submissionsByTypeChart').getContext('2d');
            
            if (submissionsByTypeChart) {
                submissionsByTypeChart.destroy();
            }

            const data = reportData.submissionsByType;
            
            submissionsByTypeChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        data: Object.values(data),
                        backgroundColor: [
                            '#3b82f6', // Blue
                            '#10b981', // Green
                            '#f59e0b', // Yellow
                            '#8b5cf6', // Purple
                            '#ef4444'  // Red
                        ],
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `${context.label}: ${context.parsed} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Render submissions by status chart
        function renderSubmissionsByStatusChart() {
            const ctx = document.getElementById('submissionsByStatusChart').getContext('2d');
            
            if (submissionsByStatusChart) {
                submissionsByStatusChart.destroy();
            }

            const data = reportData.submissionsByStatus;
            
            submissionsByStatusChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        data: Object.values(data),
                        backgroundColor: [
                            '#10b981', // Green for Approved
                            '#f59e0b', // Yellow for Pending
                            '#3b82f6', // Blue for Under Review
                            '#ef4444'  // Red for Rejected
                        ],
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `${context.label}: ${context.parsed} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Render trend chart
        function renderTrendChart() {
            const ctx = document.getElementById('trendChart').getContext('2d');
            
            if (trendChart) {
                trendChart.destroy();
            }

            const data = reportData.trendData[currentTrendPeriod];
            
            trendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Submissions',
                        data: data.data,
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#3b82f6',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    }
                }
            });
        }

        // Render group performance chart
        function renderGroupPerformanceChart() {
            const ctx = document.getElementById('groupPerformanceChart').getContext('2d');
            
            if (groupPerformanceChart) {
                groupPerformanceChart.destroy();
            }

            const groups = Object.keys(reportData.groupPerformance);
            const approvedData = groups.map(group => reportData.groupPerformance[group].approved);
            const pendingData = groups.map(group => reportData.groupPerformance[group].pending);
            const rejectedData = groups.map(group => reportData.groupPerformance[group].rejected);
            
            groupPerformanceChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: groups,
                    datasets: [
                        {
                            label: 'Approved',
                            data: approvedData,
                            backgroundColor: '#10b981',
                            borderRadius: 4
                        },
                        {
                            label: 'Pending',
                            data: pendingData,
                            backgroundColor: '#f59e0b',
                            borderRadius: 4
                        },
                        {
                            label: 'Rejected',
                            data: rejectedData,
                            backgroundColor: '#ef4444',
                            borderRadius: 4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                padding: 20
                            }
                        }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        }
                    }
                }
            });
        }

        // Render statistics table
        function renderStatsTable() {
            const tbody = document.getElementById('statsTableBody');
            const typeData = reportData.submissionsByType;
            
            tbody.innerHTML = Object.keys(typeData).map(type => {
                const total = typeData[type];
                const approved = Math.floor(total * 0.75); // Simulate approved count
                const pending = Math.floor(total * 0.15);  // Simulate pending count
                const rejected = total - approved - pending;
                const approvalRate = ((approved / total) * 100).toFixed(1);
                
                return `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            ${type}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            ${total}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-green-600 font-medium">
                            ${approved}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-yellow-600 font-medium">
                            ${pending}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-red-600 font-medium">
                            ${rejected}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-medium">
                            ${approvalRate}%
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Change chart type
        function changeChartType(chartName, newType) {
            if (chartName === 'submissionsByType') {
                const ctx = document.getElementById('submissionsByTypeChart').getContext('2d');
                submissionsByTypeChart.destroy();
                
                const data = reportData.submissionsByType;
                submissionsByTypeChart = new Chart(ctx, {
                    type: newType,
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            data: Object.values(data),
                            backgroundColor: [
                                '#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444'
                            ],
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: newType === 'bar' ? 'top' : 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        },
                        scales: newType === 'bar' ? {
                            y: {
                                beginAtZero: true
                            }
                        } : {}
                    }
                });
            } else if (chartName === 'submissionsByStatus') {
                const ctx = document.getElementById('submissionsByStatusChart').getContext('2d');
                submissionsByStatusChart.destroy();
                
                const data = reportData.submissionsByStatus;
                submissionsByStatusChart = new Chart(ctx, {
                    type: newType,
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            data: Object.values(data),
                            backgroundColor: [
                                '#10b981', '#f59e0b', '#3b82f6', '#ef4444'
                            ],
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: newType === 'bar' ? 'top' : 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        },
                        scales: newType === 'bar' ? {
                            y: {
                                beginAtZero: true
                            }
                        } : {}
                    }
                });
            }
        }

        // Change trend period
        function changeTrendPeriod(period) {
            currentTrendPeriod = period;
            
            // Update button styles
            document.querySelectorAll('#weekBtn, #monthBtn, #quarterBtn').forEach(btn => {
                btn.className = 'text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors';
            });
            document.getElementById(period + 'Btn').className = 'text-sm px-3 py-1 bg-kku-blue text-white rounded-md transition-colors';
            
            renderTrendChart();
        }

        // Apply filters
        function applyFilters() {
            const dateFrom = document.getElementById('dateFrom').value;
            const dateTo = document.getElementById('dateTo').value;
            const studentGroup = document.getElementById('studentGroup').value;
            
            showMessage('Applying filters and updating reports...', 'info');
            
            // Simulate filtering and reload data
            setTimeout(() => {
                loadReportData();
                showMessage('Reports updated successfully', 'success');
            }, 1500);
        }

        // Export report
        async function exportReport(format) {
            try {
                showMessage(`Preparing ${format.toUpperCase()} export...`, 'info');
                
                // Simulate export process
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                if (format === 'csv') {
                    // Simulate CSV download
                    const csvContent = generateCSVContent();
                    downloadFile('form_reports.csv', csvContent, 'text/csv');
                } else if (format === 'pdf') {
                    // Simulate PDF generation
                    showMessage('Generating PDF report...', 'info');
                    await new Promise(resolve => setTimeout(resolve, 3000));
                    showMessage('PDF report generated successfully', 'success');
                }
                
            } catch (error) {
                showMessage('Error exporting report: ' + error.message, 'error');
            }
        }

        // Generate CSV content
        function generateCSVContent() {
            let csv = 'Form Type,Total Submissions,Approved,Pending,Rejected,Approval Rate\n';
            
            Object.keys(reportData.submissionsByType).forEach(type => {
                const total = reportData.submissionsByType[type];
                const approved = Math.floor(total * 0.75);
                const pending = Math.floor(total * 0.15);
                const rejected = total - approved - pending;
                const approvalRate = ((approved / total) * 100).toFixed(1);
                
                csv += `${type},${total},${approved},${pending},${rejected},${approvalRate}%\n`;
            });
            
            return csv;
        }

        // Download file
        function downloadFile(filename, content, mimeType) {
            const blob = new Blob([content], { type: mimeType });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showMessage(`${filename} downloaded successfully`, 'success');
        }

        // Refresh reports
        async function refreshReports() {
            showMessage('Refreshing report data...', 'info');
            await loadReportData();
            showMessage('Reports refreshed successfully', 'success');
        }

        // Show loading state
        function showLoadingState(show) {
            const loadingState = document.getElementById('loadingState');
            const statsContainer = document.getElementById('statsContainer');
            
            if (show) {
                loadingState.classList.remove('hidden');
                statsContainer.style.opacity = '0.5';
            } else {
                loadingState.classList.add('hidden');
                statsContainer.style.opacity = '1';
            }
        }

        // Show message
        function showMessage(message, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `fixed top-4 right-4 p-4 rounded-md text-sm font-medium z-50 ${
                type === 'success' ? 'bg-green-100 border border-green-200 text-green-800' :
                type === 'error' ? 'bg-red-100 border border-red-200 text-red-800' :
                'bg-blue-100 border border-blue-200 text-blue-800'
            }`;
            messageDiv.textContent = message;
            
            document.body.appendChild(messageDiv);
            
            setTimeout(() => {
                if (document.body.contains(messageDiv)) {
                    document.body.removeChild(messageDiv);
                }
            }, 3000);
        }

        // API simulation functions
        async function fetchReportingDataAPI() {
            // Simulate API call delay
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            // In a real application, this would fetch data from the server
            // and update the reportData object
            return reportData;
        }

        // Navigation functions
        function goToDashboard() {
            showMessage('Navigating to dashboard...', 'info');
            setTimeout(() => alert('Going to Dashboard...'), 500);
        }

        function goToMyForms() {
            showMessage('Navigating to forms...', 'info');
            setTimeout(() => alert('Going to My Forms...'), 500);
        }

        function goToHistory() {
            showMessage('Navigating to history...', 'info');
            setTimeout(() => alert('Going to Form History...'), 500);
        }

        function goToProfile() {
            showMessage('Navigating to profile...', 'info');
            setTimeout(() => alert('Going to Profile...'), 500);
        }

        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                showMessage('Logging out...', 'info');
                setTimeout(() => alert('Logged out successfully'), 1000);
            }
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'988609c0d496d334',t:'MTc1OTQyNzM4NC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>


