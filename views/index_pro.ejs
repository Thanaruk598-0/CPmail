<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Courses & Sections - FormEase Admin</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'kku-blue': '#1e40af',
                        'kku-blue-light': '#3b82f6',
                        'kku-blue-dark': '#1e3a8a'
                    }
                }
            }
        }
    </script>
    <style>
        body {
            box-sizing: border-box;
        }
        .admin-card {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            transition: all 0.2s;
        }
        .course-row {
            transition: all 0.2s;
        }
        .course-row:hover {
            background-color: #f9fafb;
        }
        .status-badge {
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
        }
        .status-active { background-color: #dcfce7; color: #166534; }
        .status-inactive { background-color: #fee2e2; color: #991b1b; }
        .status-draft { background-color: #fef3c7; color: #92400e; }
        .semester-badge {
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            background-color: #dbeafe;
            color: #1e40af;
        }
        .search-input {
            transition: all 0.2s;
        }
        .search-input:focus {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        .action-btn {
            transition: all 0.2s;
        }
        .action-btn:hover {
            transform: translateY(-1px);
        }
        .table-container {
            overflow-x: auto;
        }
        .section-item {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 0.375rem;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
        }
        .lecturer-tag {
            background-color: #f3e8ff;
            color: #7c3aed;
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            display: inline-block;
            margin: 0.125rem;
        }
        @media (max-width: 768px) {
            .mobile-card {
                display: block;
            }
            .desktop-table {
                display: none;
            }
        }
        @media (min-width: 769px) {
            .mobile-card {
                display: none;
            }
            .desktop-table {
                display: table;
            }
        }
        .tab-button {
            transition: all 0.2s;
        }
        .tab-button.active {
            background-color: #1e40af;
            color: white;
        }
        .tab-button:not(.active) {
            background-color: #f3f4f6;
            color: #6b7280;
        }
        .tab-button:not(.active):hover {
            background-color: #e5e7eb;
            color: #374151;
        }
    </style>
</head>
<body class="bg-gray-50 font-sans">
    <!-- Header -->
    <header class="bg-kku-blue text-white shadow-lg">
        <div class="container mx-auto px-4">
            <div class="flex items-center justify-between py-4">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-white rounded-full flex items-center justify-center">
                        <span class="text-kku-blue font-bold text-lg">F</span>
                    </div>
                    <div>
                        <h1 class="text-xl font-bold">FormEase Admin</h1>
                        <p class="text-blue-200 text-sm">Faculty of Computer Science</p>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="hidden md:block text-right">
                        <p class="text-sm font-medium">Admin User</p>
                        <p class="text-blue-200 text-xs">System Administrator</p>
                    </div>
                    <button onclick="goToDashboard()" class="bg-kku-blue-light hover:bg-kku-blue-dark px-3 py-2 rounded-md text-sm font-medium transition-colors">
                        Dashboard
                    </button>
                    <button onclick="logout()" class="bg-kku-blue-light hover:bg-kku-blue-dark px-3 py-2 rounded-md text-sm font-medium transition-colors">
                        Logout
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="bg-white shadow-sm border-b">
        <div class="container mx-auto px-4">
            <div class="flex space-x-8 overflow-x-auto">
                <a href="#" onclick="goToDashboard()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    Dashboard
                </a>
                <a href="#" onclick="goToManageUsers()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    Manage Users
                </a>
                <a href="#" class="py-3 px-1 border-b-2 border-kku-blue text-kku-blue font-medium whitespace-nowrap">
                    Courses & Sections
                </a>
                <a href="#" onclick="goToManageTemplates()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    Form Templates
                </a>
                <a href="#" onclick="goToViewAllForms()" class="py-3 px-1 text-gray-500 hover:text-kku-blue font-medium whitespace-nowrap transition-colors">
                    All Forms
                </a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-6">
        <!-- Page Header -->
        <div class="mb-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <div>
                    <h2 class="text-2xl font-bold text-gray-900 mb-2">Manage Courses & Sections</h2>
                    <p class="text-gray-600">Create and manage courses, sections, and lecturer assignments.</p>
                </div>
                <div class="mt-4 sm:mt-0 flex space-x-3">
                    <button onclick="openAddSectionModal()" class="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors font-medium text-sm">
                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add Section
                    </button>
                    <button onclick="openAddCourseModal()" class="bg-kku-blue text-white px-4 py-2 rounded-md hover:bg-kku-blue-dark transition-colors font-medium text-sm">
                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add Course
                    </button>
                </div>
            </div>
        </div>

        <!-- Success/Error Messages -->
        <div id="messageContainer" class="hidden mb-6">
            <div id="messageContent" class="p-4 rounded-md text-sm font-medium"></div>
        </div>

        <!-- Course Statistics -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="admin-card p-6">
                <div class="flex items-center">
                    <div class="bg-blue-100 p-3 rounded-full">
                        <svg class="w-6 h-6 text-kku-blue" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Total Courses</p>
                        <p class="text-2xl font-bold text-gray-900" id="totalCoursesCount">24</p>
                    </div>
                </div>
            </div>
            
            <div class="admin-card p-6">
                <div class="flex items-center">
                    <div class="bg-purple-100 p-3 rounded-full">
                        <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Total Sections</p>
                        <p class="text-2xl font-bold text-gray-900" id="totalSectionsCount">87</p>
                    </div>
                </div>
            </div>
            
            <div class="admin-card p-6">
                <div class="flex items-center">
                    <div class="bg-green-100 p-3 rounded-full">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Active Courses</p>
                        <p class="text-2xl font-bold text-gray-900" id="activeCoursesCount">21</p>
                    </div>
                </div>
            </div>
            
            <div class="admin-card p-6">
                <div class="flex items-center">
                    <div class="bg-yellow-100 p-3 rounded-full">
                        <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Assigned Lecturers</p>
                        <p class="text-2xl font-bold text-gray-900" id="assignedLecturersCount">45</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabs -->
        <div class="mb-6">
            <div class="flex space-x-1 bg-gray-100 p-1 rounded-lg">
                <button onclick="switchTab('courses')" id="coursesTab" class="tab-button active flex-1 py-2 px-4 rounded-md font-medium text-sm">
                    Courses
                </button>
                <button onclick="switchTab('sections')" id="sectionsTab" class="tab-button flex-1 py-2 px-4 rounded-md font-medium text-sm">
                    Sections
                </button>
            </div>
        </div>

        <!-- Search and Filter Controls -->
        <div class="admin-card mb-6">
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="md:col-span-2">
                        <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                        <div class="relative">
                            <input 
                                type="text" 
                                id="searchInput" 
                                placeholder="Search by course code, name, or lecturer..."
                                class="search-input w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                            >
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                </svg>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label for="semesterFilter" class="block text-sm font-medium text-gray-700 mb-2">Semester</label>
                        <select id="semesterFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent">
                            <option value="">All Semesters</option>
                            <option value="2024/1">2024/1</option>
                            <option value="2024/2">2024/2</option>
                            <option value="2023/2">2023/2</option>
                        </select>
                    </div>
                    
                    <div>
                        <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                        <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                            <option value="draft">Draft</option>
                        </select>
                    </div>
                </div>
                
                <div class="mt-4 flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <div class="flex items-center space-x-4">
                        <button onclick="clearFilters()" class="text-kku-blue hover:text-kku-blue-dark text-sm font-medium">
                            Clear Filters
                        </button>
                        <span class="text-sm text-gray-500" id="resultsCount">Showing 24 courses</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Courses Tab Content -->
        <div id="coursesContent" class="admin-card">
            <div class="table-container">
                <!-- Desktop Table -->
                <table class="desktop-table min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:text-gray-700" onclick="sortTable('courseCode')">
                                Course Code
                                <svg class="w-4 h-4 inline ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
                                </svg>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:text-gray-700" onclick="sortTable('courseName')">
                                Course Name
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Credits
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Semester
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Sections
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Status
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="coursesTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Table rows will be populated here -->
                    </tbody>
                </table>

                <!-- Mobile Cards -->
                <div id="mobileCoursesContainer" class="mobile-card space-y-4 p-4">
                    <!-- Mobile course cards will be populated here -->
                </div>
            </div>
        </div>

        <!-- Sections Tab Content -->
        <div id="sectionsContent" class="admin-card hidden">
            <div class="table-container">
                <!-- Desktop Table -->
                <table class="desktop-table min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:text-gray-700" onclick="sortSectionsTable('courseCode')">
                                Course
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:text-gray-700" onclick="sortSectionsTable('sectionNumber')">
                                Section
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Lecturers
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Schedule
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Capacity
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Status
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="sectionsTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Table rows will be populated here -->
                    </tbody>
                </table>

                <!-- Mobile Cards -->
                <div id="mobileSectionsContainer" class="mobile-card space-y-4 p-4">
                    <!-- Mobile section cards will be populated here -->
                </div>
            </div>
        </div>
    </main>

    <!-- Add/Edit Course Modal -->
    <div id="courseModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-2xl shadow-lg rounded-md bg-white">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900" id="courseModalTitle">Add New Course</h3>
                <button id="closeCourseModal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form id="courseForm" class="space-y-6">
                <input type="hidden" id="courseId" name="courseId">
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="courseCode" class="block text-sm font-medium text-gray-700 mb-2">
                            Course Code <span class="text-red-500">*</span>
                        </label>
                        <input 
                            type="text" 
                            id="courseCode" 
                            name="courseCode" 
                            required
                            placeholder="e.g., CS101"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                    </div>
                    
                    <div>
                        <label for="credits" class="block text-sm font-medium text-gray-700 mb-2">
                            Credits <span class="text-red-500">*</span>
                        </label>
                        <input 
                            type="number" 
                            id="credits" 
                            name="credits" 
                            required
                            min="1"
                            max="6"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                    </div>
                </div>
                
                <div>
                    <label for="courseName" class="block text-sm font-medium text-gray-700 mb-2">
                        Course Name <span class="text-red-500">*</span>
                    </label>
                    <input 
                        type="text" 
                        id="courseName" 
                        name="courseName" 
                        required
                        placeholder="e.g., Introduction to Computer Science"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                    >
                </div>
                
                <div>
                    <label for="courseDescription" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                    <textarea 
                        id="courseDescription" 
                        name="courseDescription" 
                        rows="3"
                        placeholder="Course description..."
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                    ></textarea>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="courseSemester" class="block text-sm font-medium text-gray-700 mb-2">
                            Semester <span class="text-red-500">*</span>
                        </label>
                        <select 
                            id="courseSemester" 
                            name="courseSemester" 
                            required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                            <option value="">Select Semester</option>
                            <option value="2024/1">2024/1</option>
                            <option value="2024/2">2024/2</option>
                            <option value="2025/1">2025/1</option>
                        </select>
                    </div>
                    
                    <div>
                        <label for="courseStatus" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                        <select 
                            id="courseStatus" 
                            name="courseStatus"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                            <option value="draft">Draft</option>
                        </select>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                    <button 
                        type="button" 
                        id="cancelCourseModal"
                        class="bg-gray-300 text-gray-700 px-6 py-2 rounded-md hover:bg-gray-400 transition-colors font-medium"
                    >
                        Cancel
                    </button>
                    <button 
                        type="submit"
                        class="bg-kku-blue text-white px-6 py-2 rounded-md hover:bg-kku-blue-dark transition-colors font-medium"
                    >
                        <span id="courseSubmitButtonText">Add Course</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add/Edit Section Modal -->
    <div id="sectionModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-3xl shadow-lg rounded-md bg-white">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-900" id="sectionModalTitle">Add New Section</h3>
                <button id="closeSectionModal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form id="sectionForm" class="space-y-6">
                <input type="hidden" id="sectionId" name="sectionId">
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="sectionCourse" class="block text-sm font-medium text-gray-700 mb-2">
                            Course <span class="text-red-500">*</span>
                        </label>
                        <select 
                            id="sectionCourse" 
                            name="sectionCourse" 
                            required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                            <option value="">Select Course</option>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                    
                    <div>
                        <label for="sectionNumber" class="block text-sm font-medium text-gray-700 mb-2">
                            Section Number <span class="text-red-500">*</span>
                        </label>
                        <input 
                            type="text" 
                            id="sectionNumber" 
                            name="sectionNumber" 
                            required
                            placeholder="e.g., 001, 002"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="sectionCapacity" class="block text-sm font-medium text-gray-700 mb-2">
                            Capacity <span class="text-red-500">*</span>
                        </label>
                        <input 
                            type="number" 
                            id="sectionCapacity" 
                            name="sectionCapacity" 
                            required
                            min="1"
                            placeholder="e.g., 40"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                    </div>
                    
                    <div>
                        <label for="sectionStatus" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                        <select 
                            id="sectionStatus" 
                            name="sectionStatus"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                        >
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                            <option value="draft">Draft</option>
                        </select>
                    </div>
                </div>
                
                <div>
                    <label for="sectionSchedule" class="block text-sm font-medium text-gray-700 mb-2">Schedule</label>
                    <input 
                        type="text" 
                        id="sectionSchedule" 
                        name="sectionSchedule"
                        placeholder="e.g., Mon/Wed 09:00-10:30"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-kku-blue focus:border-transparent"
                    >
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Assign Lecturers</label>
                    <div class="border border-gray-300 rounded-md p-4 max-h-48 overflow-y-auto">
                        <div id="lecturersList" class="space-y-2">
                            <!-- Lecturer checkboxes will be populated here -->
                        </div>
                    </div>
                    <p class="text-xs text-gray-500 mt-1">Select one or more lecturers to assign to this section.</p>
                </div>

                <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                    <button 
                        type="button" 
                        id="cancelSectionModal"
                        class="bg-gray-300 text-gray-700 px-6 py-2 rounded-md hover:bg-gray-400 transition-colors font-medium"
                    >
                        Cancel
                    </button>
                    <button 
                        type="submit"
                        class="bg-kku-blue text-white px-6 py-2 rounded-md hover:bg-kku-blue-dark transition-colors font-medium"
                    >
                        <span id="sectionSubmitButtonText">Add Section</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Loading Modal -->
    <div id="loadingModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100">
                    <svg class="animate-spin h-6 w-6 text-kku-blue" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
                <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4" id="loadingTitle">Processing</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500" id="loadingMessage">Please wait...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gray-100 text-gray-600 py-4 text-center text-sm mt-8">
        <p>&copy; 2024 Faculty of Computer Science, Khon Kaen University. All rights reserved.</p>
    </footer>

    <script>
        // Sample data - replace with API calls
        let courses = [
            {
                id: 1,
                courseCode: 'CS101',
                courseName: 'Introduction to Computer Science',
                credits: 3,
                semester: '2024/1',
                description: 'Basic concepts of computer science and programming',
                status: 'active',
                createdAt: '2024-01-01T00:00:00'
            },
            {
                id: 2,
                courseCode: 'CS201',
                courseName: 'Data Structures and Algorithms',
                credits: 3,
                semester: '2024/1',
                description: 'Fundamental data structures and algorithmic techniques',
                status: 'active',
                createdAt: '2024-01-01T00:00:00'
            },
            {
                id: 3,
                courseCode: 'CS301',
                courseName: 'Database Systems',
                credits: 3,
                semester: '2024/2',
                description: 'Design and implementation of database systems',
                status: 'draft',
                createdAt: '2024-01-01T00:00:00'
            }
        ];

        let sections = [
            {
                id: 1,
                courseId: 1,
                sectionNumber: '001',
                capacity: 40,
                enrolled: 35,
                schedule: 'Mon/Wed 09:00-10:30',
                lecturers: [1, 2],
                status: 'active'
            },
            {
                id: 2,
                courseId: 1,
                sectionNumber: '002',
                capacity: 40,
                enrolled: 38,
                schedule: 'Tue/Thu 13:00-14:30',
                lecturers: [2],
                status: 'active'
            },
            {
                id: 3,
                courseId: 2,
                sectionNumber: '001',
                capacity: 35,
                enrolled: 32,
                schedule: 'Mon/Wed 10:30-12:00',
                lecturers: [1, 3],
                status: 'active'
            }
        ];

        let lecturers = [
            { id: 1, name: 'Dr. Sarah Johnson', email: 'sarah.johnson@kku.ac.th' },
            { id: 2, name: 'Dr. Robert Chen', email: 'robert.chen@kku.ac.th' },
            { id: 3, name: 'Dr. Maria Garcia', email: 'maria.garcia@kku.ac.th' },
            { id: 4, name: 'Dr. James Wilson', email: 'james.wilson@kku.ac.th' }
        ];

        let currentTab = 'courses';
        let filteredCourses = [...courses];
        let filteredSections = [...sections];
        let sortColumn = '';
        let sortDirection = 'asc';

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            renderCourses();
            renderSections();
            updateStatistics();
            populateCourseOptions();
            populateLecturersList();
        });

        // Setup event listeners
        function setupEventListeners() {
            // Search and filter
            document.getElementById('searchInput').addEventListener('input', debounce(filterData, 300));
            document.getElementById('semesterFilter').addEventListener('change', filterData);
            document.getElementById('statusFilter').addEventListener('change', filterData);
            
            // Modal controls
            document.getElementById('closeCourseModal').addEventListener('click', closeCourseModal);
            document.getElementById('cancelCourseModal').addEventListener('click', closeCourseModal);
            document.getElementById('courseForm').addEventListener('submit', handleCourseSubmit);
            
            document.getElementById('closeSectionModal').addEventListener('click', closeSectionModal);
            document.getElementById('cancelSectionModal').addEventListener('click', closeSectionModal);
            document.getElementById('sectionForm').addEventListener('submit', handleSectionSubmit);
        }

        // Debounce function for search
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Tab switching
        function switchTab(tab) {
            currentTab = tab;
            
            // Update tab buttons
            document.getElementById('coursesTab').classList.toggle('active', tab === 'courses');
            document.getElementById('sectionsTab').classList.toggle('active', tab === 'sections');
            
            // Update content visibility
            document.getElementById('coursesContent').classList.toggle('hidden', tab !== 'courses');
            document.getElementById('sectionsContent').classList.toggle('hidden', tab !== 'sections');
            
            // Update results count
            updateResultsCount();
        }

        // Filter data based on search and filters
        function filterData() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const semesterFilter = document.getElementById('semesterFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;

            if (currentTab === 'courses') {
                filteredCourses = courses.filter(course => {
                    const matchesSearch = !searchTerm || 
                        course.courseCode.toLowerCase().includes(searchTerm) ||
                        course.courseName.toLowerCase().includes(searchTerm);

                    const matchesSemester = !semesterFilter || course.semester === semesterFilter;
                    const matchesStatus = !statusFilter || course.status === statusFilter;

                    return matchesSearch && matchesSemester && matchesStatus;
                });
                renderCourses();
            } else {
                filteredSections = sections.filter(section => {
                    const course = courses.find(c => c.id === section.courseId);
                    const sectionLecturers = section.lecturers.map(id => 
                        lecturers.find(l => l.id === id)?.name || ''
                    ).join(' ');

                    const matchesSearch = !searchTerm || 
                        course?.courseCode.toLowerCase().includes(searchTerm) ||
                        course?.courseName.toLowerCase().includes(searchTerm) ||
                        section.sectionNumber.toLowerCase().includes(searchTerm) ||
                        sectionLecturers.toLowerCase().includes(searchTerm);

                    const matchesSemester = !semesterFilter || course?.semester === semesterFilter;
                    const matchesStatus = !statusFilter || section.status === statusFilter;

                    return matchesSearch && matchesSemester && matchesStatus;
                });
                renderSections();
            }
            
            updateResultsCount();
        }

        // Clear all filters
        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('semesterFilter').value = '';
            document.getElementById('statusFilter').value = '';
            filterData();
        }

        // Sort table by column
        function sortTable(column) {
            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortColumn = column;
                sortDirection = 'asc';
            }

            filteredCourses.sort((a, b) => {
                let aValue = a[column];
                let bValue = b[column];

                if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
                if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            renderCourses();
        }

        function sortSectionsTable(column) {
            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortColumn = column;
                sortDirection = 'asc';
            }

            filteredSections.sort((a, b) => {
                let aValue, bValue;
                
                if (column === 'courseCode') {
                    const courseA = courses.find(c => c.id === a.courseId);
                    const courseB = courses.find(c => c.id === b.courseId);
                    aValue = courseA?.courseCode || '';
                    bValue = courseB?.courseCode || '';
                } else {
                    aValue = a[column];
                    bValue = b[column];
                }

                if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
                if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            renderSections();
        }

        // Render courses table
        function renderCourses() {
            const tableBody = document.getElementById('coursesTableBody');
            const mobileContainer = document.getElementById('mobileCoursesContainer');
            
            const coursesHTML = filteredCourses.map(course => {
                const sectionsCount = sections.filter(s => s.courseId === course.id).length;
                
                return `
                    <tr class="course-row">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">${course.courseCode}</div>
                        </td>
                        <td class="px-6 py-4">
                            <div class="text-sm font-medium text-gray-900">${course.courseName}</div>
                            <div class="text-sm text-gray-500">${course.description || 'No description'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">${course.credits}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="semester-badge">${course.semester}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">${sectionsCount} sections</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="status-badge status-${course.status}">${course.status.charAt(0).toUpperCase() + course.status.slice(1)}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div class="flex space-x-2">
                                <button onclick="editCourse(${course.id})" class="action-btn text-kku-blue hover:text-kku-blue-dark" title="Edit Course">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                </button>
                                <button onclick="viewCourseSections(${course.id})" class="action-btn text-purple-600 hover:text-purple-800" title="View Sections">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                    </svg>
                                </button>
                                <button onclick="deleteCourse(${course.id})" class="action-btn text-red-600 hover:text-red-800" title="Delete Course">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
            
            tableBody.innerHTML = coursesHTML;

            // Mobile cards
            const mobileHTML = filteredCourses.map(course => {
                const sectionsCount = sections.filter(s => s.courseId === course.id).length;
                
                return `
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-3">
                            <div>
                                <div class="text-sm font-medium text-gray-900">${course.courseCode}</div>
                                <div class="text-sm text-gray-500">${course.courseName}</div>
                            </div>
                            <div class="flex space-x-1">
                                <button onclick="editCourse(${course.id})" class="action-btn text-kku-blue hover:text-kku-blue-dark p-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                </button>
                                <button onclick="viewCourseSections(${course.id})" class="action-btn text-purple-600 hover:text-purple-800 p-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                    </svg>
                                </button>
                                <button onclick="deleteCourse(${course.id})" class="action-btn text-red-600 hover:text-red-800 p-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div>
                                <span class="text-gray-500">Credits:</span>
                                <span class="ml-2">${course.credits}</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Semester:</span>
                                <span class="semester-badge ml-2">${course.semester}</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Sections:</span>
                                <span class="ml-2">${sectionsCount}</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Status:</span>
                                <span class="status-badge status-${course.status} ml-2">${course.status.charAt(0).toUpperCase() + course.status.slice(1)}</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            mobileContainer.innerHTML = mobileHTML;
        }

        // Render sections table
        function renderSections() {
            const tableBody = document.getElementById('sectionsTableBody');
            const mobileContainer = document.getElementById('mobileSectionsContainer');
            
            const sectionsHTML = filteredSections.map(section => {
                const course = courses.find(c => c.id === section.courseId);
                const sectionLecturers = section.lecturers.map(id => {
                    const lecturer = lecturers.find(l => l.id === id);
                    return lecturer ? `<span class="lecturer-tag">${lecturer.name}</span>` : '';
                }).join('');
                
                return `
                    <tr class="course-row">
                        <td class="px-6 py-4">
                            <div class="text-sm font-medium text-gray-900">${course?.courseCode || 'N/A'}</div>
                            <div class="text-sm text-gray-500">${course?.courseName || 'N/A'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">${section.sectionNumber}</div>
                        </td>
                        <td class="px-6 py-4">
                            <div class="flex flex-wrap">${sectionLecturers || '<span class="text-gray-400">No lecturers assigned</span>'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">${section.schedule || 'TBA'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">${section.enrolled || 0}/${section.capacity}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="status-badge status-${section.status}">${section.status.charAt(0).toUpperCase() + section.status.slice(1)}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div class="flex space-x-2">
                                <button onclick="editSection(${section.id})" class="action-btn text-kku-blue hover:text-kku-blue-dark" title="Edit Section">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                </button>
                                <button onclick="manageLecturers(${section.id})" class="action-btn text-purple-600 hover:text-purple-800" title="Manage Lecturers">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                </button>
                                <button onclick="deleteSection(${section.id})" class="action-btn text-red-600 hover:text-red-800" title="Delete Section">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
            
            tableBody.innerHTML = sectionsHTML;

            // Mobile cards
            const mobileHTML = filteredSections.map(section => {
                const course = courses.find(c => c.id === section.courseId);
                const sectionLecturers = section.lecturers.map(id => {
                    const lecturer = lecturers.find(l => l.id === id);
                    return lecturer ? lecturer.name : '';
                }).filter(name => name).join(', ');
                
                return `
                    <div class="bg-white border border-gray-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-3">
                            <div>
                                <div class="text-sm font-medium text-gray-900">${course?.courseCode || 'N/A'} - Section ${section.sectionNumber}</div>
                                <div class="text-sm text-gray-500">${course?.courseName || 'N/A'}</div>
                            </div>
                            <div class="flex space-x-1">
                                <button onclick="editSection(${section.id})" class="action-btn text-kku-blue hover:text-kku-blue-dark p-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                </button>
                                <button onclick="deleteSection(${section.id})" class="action-btn text-red-600 hover:text-red-800 p-1">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 gap-2 text-sm">
                            <div>
                                <span class="text-gray-500">Lecturers:</span>
                                <span class="ml-2">${sectionLecturers || 'No lecturers assigned'}</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Schedule:</span>
                                <span class="ml-2">${section.schedule || 'TBA'}</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Capacity:</span>
                                <span class="ml-2">${section.enrolled || 0}/${section.capacity}</span>
                            </div>
                            <div>
                                <span class="text-gray-500">Status:</span>
                                <span class="status-badge status-${section.status} ml-2">${section.status.charAt(0).toUpperCase() + section.status.slice(1)}</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            mobileContainer.innerHTML = mobileHTML;
        }

        // Update statistics
        function updateStatistics() {
            const totalCourses = courses.length;
            const totalSections = sections.length;
            const activeCourses = courses.filter(c => c.status === 'active').length;
            const assignedLecturers = new Set(sections.flatMap(s => s.lecturers)).size;

            document.getElementById('totalCoursesCount').textContent = totalCourses;
            document.getElementById('totalSectionsCount').textContent = totalSections;
            document.getElementById('activeCoursesCount').textContent = activeCourses;
            document.getElementById('assignedLecturersCount').textContent = assignedLecturers;
        }

        // Update results count
        function updateResultsCount() {
            const count = currentTab === 'courses' ? filteredCourses.length : filteredSections.length;
            const type = currentTab === 'courses' ? 'courses' : 'sections';
            document.getElementById('resultsCount').textContent = `Showing ${count} ${type}`;
        }

        // Populate course options for section form
        function populateCourseOptions() {
            const select = document.getElementById('sectionCourse');
            select.innerHTML = '<option value="">Select Course</option>' + 
                courses.map(course => 
                    `<option value="${course.id}">${course.courseCode} - ${course.courseName}</option>`
                ).join('');
        }

        // Populate lecturers list for section form
        function populateLecturersList() {
            const container = document.getElementById('lecturersList');
            container.innerHTML = lecturers.map(lecturer => `
                <label class="flex items-center">
                    <input type="checkbox" name="lecturers" value="${lecturer.id}" class="h-4 w-4 text-kku-blue focus:ring-kku-blue border-gray-300 rounded">
                    <span class="ml-2 text-sm text-gray-700">${lecturer.name}</span>
                    <span class="ml-1 text-xs text-gray-500">(${lecturer.email})</span>
                </label>
            `).join('');
        }

        // Modal functions
        function openAddCourseModal() {
            document.getElementById('courseModalTitle').textContent = 'Add New Course';
            document.getElementById('courseSubmitButtonText').textContent = 'Add Course';
            document.getElementById('courseForm').reset();
            document.getElementById('courseId').value = '';
            document.getElementById('courseModal').classList.remove('hidden');
        }

        function openAddSectionModal() {
            document.getElementById('sectionModalTitle').textContent = 'Add New Section';
            document.getElementById('sectionSubmitButtonText').textContent = 'Add Section';
            document.getElementById('sectionForm').reset();
            document.getElementById('sectionId').value = '';
            // Clear lecturer checkboxes
            document.querySelectorAll('input[name="lecturers"]').forEach(cb => cb.checked = false);
            document.getElementById('sectionModal').classList.remove('hidden');
        }

        function closeCourseModal() {
            document.getElementById('courseModal').classList.add('hidden');
        }

        function closeSectionModal() {
            document.getElementById('sectionModal').classList.add('hidden');
        }

        // Handle form submissions
        async function handleCourseSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const courseData = Object.fromEntries(formData.entries());
            const isEdit = !!courseData.courseId;
            
            try {
                showLoadingModal(
                    isEdit ? 'Updating Course' : 'Creating Course',
                    isEdit ? 'Updating course information...' : 'Creating new course...'
                );
                
                if (isEdit) {
                    await updateCourseAPI(courseData);
                    showMessage('Course updated successfully!', 'success');
                } else {
                    await createCourseAPI(courseData);
                    showMessage('Course created successfully!', 'success');
                }
                
                closeCourseModal();
                renderCourses();
                updateStatistics();
                populateCourseOptions();
                
            } catch (error) {
                showMessage('Error saving course: ' + error.message, 'error');
            } finally {
                hideLoadingModal();
            }
        }

        async function handleSectionSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const sectionData = Object.fromEntries(formData.entries());
            const isEdit = !!sectionData.sectionId;
            
            // Get selected lecturers
            const selectedLecturers = Array.from(document.querySelectorAll('input[name="lecturers"]:checked'))
                .map(cb => parseInt(cb.value));
            sectionData.lecturers = selectedLecturers;
            
            try {
                showLoadingModal(
                    isEdit ? 'Updating Section' : 'Creating Section',
                    isEdit ? 'Updating section information...' : 'Creating new section...'
                );
                
                if (isEdit) {
                    await updateSectionAPI(sectionData);
                    showMessage('Section updated successfully!', 'success');
                } else {
                    await createSectionAPI(sectionData);
                    showMessage('Section created successfully!', 'success');
                }
                
                closeSectionModal();
                renderSections();
                updateStatistics();
                
            } catch (error) {
                showMessage('Error saving section: ' + error.message, 'error');
            } finally {
                hideLoadingModal();
            }
        }

        // CRUD functions
        function editCourse(courseId) {
            const course = courses.find(c => c.id === courseId);
            if (!course) return;
            
            document.getElementById('courseModalTitle').textContent = 'Edit Course';
            document.getElementById('courseSubmitButtonText').textContent = 'Update Course';
            
            // Populate form
            document.getElementById('courseId').value = course.id;
            document.getElementById('courseCode').value = course.courseCode;
            document.getElementById('courseName').value = course.courseName;
            document.getElementById('credits').value = course.credits;
            document.getElementById('courseSemester').value = course.semester;
            document.getElementById('courseDescription').value = course.description || '';
            document.getElementById('courseStatus').value = course.status;
            
            document.getElementById('courseModal').classList.remove('hidden');
        }

        function editSection(sectionId) {
            const section = sections.find(s => s.id === sectionId);
            if (!section) return;
            
            document.getElementById('sectionModalTitle').textContent = 'Edit Section';
            document.getElementById('sectionSubmitButtonText').textContent = 'Update Section';
            
            // Populate form
            document.getElementById('sectionId').value = section.id;
            document.getElementById('sectionCourse').value = section.courseId;
            document.getElementById('sectionNumber').value = section.sectionNumber;
            document.getElementById('sectionCapacity').value = section.capacity;
            document.getElementById('sectionSchedule').value = section.schedule || '';
            document.getElementById('sectionStatus').value = section.status;
            
            // Set lecturer checkboxes
            document.querySelectorAll('input[name="lecturers"]').forEach(cb => {
                cb.checked = section.lecturers.includes(parseInt(cb.value));
            });
            
            document.getElementById('sectionModal').classList.remove('hidden');
        }

        async function deleteCourse(courseId) {
            const course = courses.find(c => c.id === courseId);
            if (!course) return;
            
            const courseSections = sections.filter(s => s.courseId === courseId);
            let confirmMessage = `Are you sure you want to delete "${course.courseCode} - ${course.courseName}"?`;
            
            if (courseSections.length > 0) {
                confirmMessage += `\n\nThis will also delete ${courseSections.length} associated section(s).`;
            }
            
            confirmMessage += '\n\nThis action cannot be undone.';
            
            if (confirm(confirmMessage)) {
                try {
                    showLoadingModal('Deleting Course', 'Removing course and associated sections...');
                    
                    await deleteCourseAPI(courseId);
                    
                    // Remove from local arrays
                    courses = courses.filter(c => c.id !== courseId);
                    sections = sections.filter(s => s.courseId !== courseId);
                    filteredCourses = filteredCourses.filter(c => c.id !== courseId);
                    filteredSections = filteredSections.filter(s => s.courseId !== courseId);
                    
                    renderCourses();
                    renderSections();
                    updateStatistics();
                    populateCourseOptions();
                    
                    showMessage('Course deleted successfully!', 'success');
                } catch (error) {
                    showMessage('Error deleting course: ' + error.message, 'error');
                } finally {
                    hideLoadingModal();
                }
            }
        }

        async function deleteSection(sectionId) {
            const section = sections.find(s => s.id === sectionId);
            if (!section) return;
            
            const course = courses.find(c => c.id === section.courseId);
            
            if (confirm(`Are you sure you want to delete section ${section.sectionNumber} of ${course?.courseCode}? This action cannot be undone.`)) {
                try {
                    showLoadingModal('Deleting Section', 'Removing section...');
                    
                    await deleteSectionAPI(sectionId);
                    
                    // Remove from local arrays
                    sections = sections.filter(s => s.id !== sectionId);
                    filteredSections = filteredSections.filter(s => s.id !== sectionId);
                    
                    renderSections();
                    updateStatistics();
                    
                    showMessage('Section deleted successfully!', 'success');
                } catch (error) {
                    showMessage('Error deleting section: ' + error.message, 'error');
                } finally {
                    hideLoadingModal();
                }
            }
        }

        function viewCourseSections(courseId) {
            switchTab('sections');
            
            // Filter sections for this course
            const course = courses.find(c => c.id === courseId);
            document.getElementById('searchInput').value = course?.courseCode || '';
            filterData();
            
            showMessage(`Showing sections for ${course?.courseCode}`, 'success');
        }

        function manageLecturers(sectionId) {
            editSection(sectionId);
        }

        // Utility functions
        function showMessage(message, type) {
            const container = document.getElementById('messageContainer');
            const content = document.getElementById('messageContent');
            
            content.textContent = message;
            content.className = `p-4 rounded-md text-sm font-medium ${
                type === 'success' 
                    ? 'bg-green-100 border border-green-200 text-green-800' 
                    : 'bg-red-100 border border-red-200 text-red-800'
            }`;
            
            container.classList.remove('hidden');
            
            setTimeout(() => {
                container.classList.add('hidden');
            }, 5000);
        }

        function showLoadingModal(title, message) {
            document.getElementById('loadingTitle').textContent = title;
            document.getElementById('loadingMessage').textContent = message;
            document.getElementById('loadingModal').classList.remove('hidden');
        }

        function hideLoadingModal() {
            document.getElementById('loadingModal').classList.add('hidden');
        }

        // API simulation functions
        async function createCourseAPI(courseData) {
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            const newCourse = {
                id: Date.now(),
                courseCode: courseData.courseCode,
                courseName: courseData.courseName,
                credits: parseInt(courseData.credits),
                semester: courseData.courseSemester,
                description: courseData.courseDescription,
                status: courseData.courseStatus || 'active',
                createdAt: new Date().toISOString()
            };
            
            courses.unshift(newCourse);
            filteredCourses = [...courses];
            
            return newCourse;
        }

        async function updateCourseAPI(courseData) {
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            const courseIndex = courses.findIndex(c => c.id == courseData.courseId);
            if (courseIndex !== -1) {
                courses[courseIndex] = {
                    ...courses[courseIndex],
                    courseCode: courseData.courseCode,
                    courseName: courseData.courseName,
                    credits: parseInt(courseData.credits),
                    semester: courseData.courseSemester,
                    description: courseData.courseDescription,
                    status: courseData.courseStatus
                };
                filteredCourses = [...courses];
            }
            
            return courses[courseIndex];
        }

        async function deleteCourseAPI(courseId) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            return { success: true };
        }

        async function createSectionAPI(sectionData) {
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            const newSection = {
                id: Date.now(),
                courseId: parseInt(sectionData.sectionCourse),
                sectionNumber: sectionData.sectionNumber,
                capacity: parseInt(sectionData.sectionCapacity),
                enrolled: 0,
                schedule: sectionData.sectionSchedule,
                lecturers: sectionData.lecturers || [],
                status: sectionData.sectionStatus || 'active'
            };
            
            sections.unshift(newSection);
            filteredSections = [...sections];
            
            return newSection;
        }

        async function updateSectionAPI(sectionData) {
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            const sectionIndex = sections.findIndex(s => s.id == sectionData.sectionId);
            if (sectionIndex !== -1) {
                sections[sectionIndex] = {
                    ...sections[sectionIndex],
                    courseId: parseInt(sectionData.sectionCourse),
                    sectionNumber: sectionData.sectionNumber,
                    capacity: parseInt(sectionData.sectionCapacity),
                    schedule: sectionData.sectionSchedule,
                    lecturers: sectionData.lecturers || [],
                    status: sectionData.sectionStatus
                };
                filteredSections = [...sections];
            }
            
            return sections[sectionIndex];
        }

        async function deleteSectionAPI(sectionId) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            return { success: true };
        }

        // Navigation functions
        function goToDashboard() {
            showLoadingModal('Loading Dashboard', 'Returning to admin dashboard...');
            setTimeout(() => {
                hideLoadingModal();
                alert('Returning to Admin Dashboard...');
            }, 1500);
        }

        function goToManageUsers() {
            alert('Navigating to Manage Users...');
        }

        function goToManageTemplates() {
            alert('Navigating to Manage Form Templates...');
        }

        function goToViewAllForms() {
            alert('Navigating to View All Forms...');
        }

        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                showLoadingModal('Logging Out', 'Signing you out securely...');
                setTimeout(() => {
                    alert('Logged out successfully');
                }, 1500);
            }
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98860487d727d334',t:'MTc1OTQyNzE3MC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>


