<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<%- include('partials/navbar') %>

<style>
  /* ============ PAGE SCOPE ============ */
  .notifications-view {
    --nv-text: #111827;
    --nv-sub: #6b7280;
    --nv-muted: #9ca3af;
    --nv-surface: #ffffff;
    --nv-border: #e5e7eb;
    --nv-shadow: 0 1px 3px 0 rgba(0,0,0,0.1);
    --nv-brand: #3b82f6;
    --nv-success: #10b981;
    --nv-success-600: #059669;
  }

  .notifications-view .container-wrap {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem 3rem;
  }

  /* Header */
  .notifications-view .page-header { margin-bottom: 1.75rem; }
  .notifications-view .page-title {
    font-size: 1.75rem; line-height: 1.2; font-weight: 700; color: var(--nv-text);
    margin: 0 0 .375rem;
  }
  .notifications-view .page-desc { color: var(--nv-sub); margin: 0; }

  /* Toolbar */
  .notifications-view .toolbar {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: .75rem 1rem;
    align-items: center;
    margin-bottom: 1rem;
  }
  @media (max-width: 768px) {
    .notifications-view .toolbar { grid-template-columns: 1fr; }
  }

  /* Filter chips */
  .notifications-view .filters {
    display: flex; flex-wrap: wrap; gap: .5rem;
  }
  .notifications-view .filter-chip {
    display: inline-flex; align-items: center; gap: .5rem;
    padding: .5rem .75rem; border: 1px solid var(--nv-border); border-radius: .5rem;
    background: var(--nv-surface); color: #374151; font-weight: 500; cursor: pointer;
    transition: all .2s;
  }
  .notifications-view .filter-chip:hover { background: #f3f4f6; }
  .notifications-view .filter-chip.active { background: var(--nv-brand); color: #fff; border-color: var(--nv-brand); }
  .notifications-view .filter-count {
    display: inline-flex; align-items: center; justify-content: center;
    height: 1.3rem; min-width: 1.3rem; padding: 0 .5rem;
    background: #eef2ff; color: #374151; border-radius: 1rem; font-size: .75rem; font-weight: 700;
  }
  .notifications-view .filter-chip.active .filter-count { background: rgba(255,255,255,.25); color: #fff; }

  /* Actions (scoped) */
  .notifications-view .actions { display: flex; flex-wrap: wrap; gap: .5rem; justify-content: flex-end; }
  .notifications-view .btn-action {
    padding: .6rem 1rem; border-radius: .5rem; font-weight: 600; border: none; display: inline-flex; gap: .5rem; align-items: center;
    transition: transform .05s ease, background .2s ease;
  }
  .notifications-view .btn-action:active { transform: translateY(1px); }
  .notifications-view .btn-primary { background: var(--nv-success); color: #fff; }
  .notifications-view .btn-primary:hover { background: var(--nv-success-600); }
  .notifications-view .btn-secondary { background: #f3f4f6; color: #374151; }
  .notifications-view .btn-secondary:hover { background: #e5e7eb; }

  /* Section card */
  .notifications-view .section-card {
    background: var(--nv-surface); border-radius: .75rem; box-shadow: var(--nv-shadow);
    border: 1px solid #f3f4f6; padding: 1rem 1rem 0.5rem; margin-bottom: 1rem;
  }

  /* List */
  .notifications-view .list { display: flex; flex-direction: column; gap: .75rem; }
  .notifications-view .item {
    background: var(--nv-surface); border: 1px solid var(--nv-border); border-radius: .75rem; box-shadow: var(--nv-shadow);
    padding: 1rem 1rem; transition: box-shadow .2s, transform .2s, background .2s; border-left: 4px solid transparent;
  }
  .notifications-view .item:hover { box-shadow: 0 4px 6px -1px rgba(0,0,0,.1); transform: translateY(-1px); }
  .notifications-view .item.unread { border-left-color: var(--nv-brand); background: linear-gradient(135deg,#f7fbff 0%,#ffffff 100%); }

  .notifications-view .item-head { display: grid; grid-template-columns: auto 1fr; gap: .75rem; align-items: start; }
  .notifications-view .item-icon {
    width: 40px; height: 40px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center;
  }
  .notifications-view .icon-form { background: #dbeafe; color: #1d4ed8; }
  .notifications-view .icon-system { background: #fef3c7; color: #d97706; }
  .notifications-view .icon-security { background: #fee2e2; color: #dc2626; }
  .notifications-view .icon-announcement { background: #d1fae5; color: #059669; }
  .notifications-view .icon-reminder { background: #e0e7ff; color: #7c3aed; }

  .notifications-view .item-title-row {
    display: flex; gap: .5rem; align-items: center; justify-content: space-between; margin-bottom: .25rem;
  }
  .notifications-view .item-title { font-weight: 700; color: var(--nv-text); margin: 0; }
  .notifications-view .unread-dot { width: 8px; height: 8px; background: var(--nv-brand); border-radius: 50%; }

  .notifications-view .item-msg { color: var(--nv-sub); font-size: .95rem; margin: .125rem 0 .5rem; }
  .notifications-view .item-meta { display: flex; flex-wrap: wrap; gap: .5rem 1rem; align-items: center; font-size: .8rem; color: var(--nv-muted); }
  .notifications-view .badge-type { background: #f3f4f6; color: #374151; padding: .2rem .6rem; border-radius: 999px; font-weight: 600; }

  .notifications-view .item-actions { margin-top: .5rem; display: flex; gap: .5rem; }
  .notifications-view .btn-sm {
    padding: .35rem .8rem; font-size: .875rem; border-radius: .375rem; border: 1px solid; background: #fff; cursor: pointer; transition: all .2s;
  }
  .notifications-view .btn-mark-read { color: var(--nv-brand); border-color: var(--nv-brand); }
  .notifications-view .btn-mark-read:hover { background: var(--nv-brand); color: #fff; }
  .notifications-view .status-read { color: #6b7280; display: inline-flex; gap: .35rem; align-items: center; }

  /* Empty state */
  .notifications-view .empty {
    background: var(--nv-surface); border: 1px dashed var(--nv-border); border-radius: .75rem; text-align: center;
    padding: 3rem 1rem; color: var(--nv-sub);
  }
  .notifications-view .empty svg { width: 3.25rem; height: 3.25rem; color: #d1d5db; margin-bottom: .75rem; }
  .notifications-view .empty h3 { color: var(--nv-text); font-size: 1.125rem; margin-bottom: .25rem; }

  /* Pagination */
  .notifications-view .pagination-wrap { margin-top: 1.25rem; display: flex; justify-content: center; }
  .notifications-view .pagination { display: flex; gap: .5rem; }
  .notifications-view .page-link { border-radius: .375rem; }

  /* Loading spinner (inline) */
  .notifications-view .loading {
    display: inline-block; width: 1rem; height: 1rem; border: 2px solid #f3f4f6; border-top-color: var(--nv-brand); border-radius: 50%;
    animation: spin .6s linear infinite;
  }
  @keyframes spin { to { transform: rotate(360deg); } }
</style>

<div class="notifications-view" role="main">
  <div class="container-wrap">
    <!-- Header -->
    <header class="page-header">
      <h1 class="page-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h1>
      <p class="page-desc">‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</p>
    </header>

    <!-- Toolbar -->
    <div class="toolbar section-card" aria-label="‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°">
      <div class="filters" role="tablist" aria-label="‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô">
        <button class="filter-chip active" onclick="filterNotifications('all')" role="tab" aria-selected="true">
          üîî ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <span class="filter-count" id="allCount"><%= notifications.length %></span>
        </button>
        <button class="filter-chip" onclick="filterNotifications('unread')" role="tab" aria-selected="false">
          ‚ö° ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô <span class="filter-count" id="unreadCount"><%= unreadCount %></span>
        </button>
        <button class="filter-chip" onclick="filterNotifications('read')" role="tab" aria-selected="false">
          ‚úì ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß <span class="filter-count" id="readCount"><%= notifications.length - unreadCount %></span>
        </button>
      </div>

      <div class="actions">
        <button class="btn-action btn-secondary" onclick="window.location.reload()" aria-label="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£">
          <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        </button>
        <button class="btn-action btn-primary" onclick="markAllAsRead()" id="markAllBtn" <%= unreadCount===0 ? 'disabled' : '' %> aria-disabled="<%= unreadCount===0 %>">
          <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </button>
      </div>
    </div>

    <!-- List -->
    <section aria-label="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô">
      <div class="list" id="notificationList">
        <% if (!notifications || notifications.length===0) { %>
          <div class="empty" role="status">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M15 17h5l-5 5v-5zM4.868 19.718A10.97 10.97 0 0112 22a10.97 10.97 0 017.132-2.282M6 9a6 6 0 1112 0c0 1.887-.454 3.665-1.257 5.234l-.321.766c-.433 1.036-.656 1.554-.656 2.5 0 .946.223 1.464.656 2.5l.321.766A8.97 8.97 0 0018 15a6 6 0 00-12 0z"></path>
            </svg>
            <h3>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
            <p>‡∏Ñ‡∏∏‡∏ì‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>
          </div>
        <% } else { %>
          <% notifications.forEach(n => { %>
            <article class="item <%= !n.read ? 'unread' : '' %>" data-read="<%= n.read %>" data-id="<%= n._id %>" aria-live="polite">
              <div class="item-head">
                <div class="item-icon icon-<%= getIconType(n.type) %>"><%- getIconSVG(n.type) %></div>
                <div>
                  <div class="item-title-row">
                    <h2 class="item-title"><%= n.type %></h2>
                    <% if (!n.read) { %><span class="unread-dot" title="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô"></span><% } %>
                  </div>
                  <p class="item-msg"><%= n.message %></p>
                  <div class="item-meta">
                    <span><%= formatDate(n.createdAt) %></span>
                    <span class="badge-type"><%= n.type %></span>
                  </div>
                  <div class="item-actions">
                    <% if (!n.read) { %>
                      <button class="btn-sm btn-mark-read" onclick="markAsRead('<%= n._id %>')" aria-label="‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß">‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</button>
                    <% } else { %>
                      <span class="status-read" aria-label="‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß">
                        <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                      </span>
                    <% } %>
                  </div>
                </div>
              </div>
            </article>
          <% }) %>
        <% } %>
      </div>
    </section>

    <!-- Pagination -->
    <% if (notifications && notifications.length > 0 && totalPages > 1) { %>
      <nav class="pagination-wrap" aria-label="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤">
        <ul class="pagination mb-0">
          <li class="page-item <%= page<=1 ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= page - 1 %>" aria-label="‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤">‚Üê ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤</a>
          </li>
          <li class="page-item active">
            <span class="page-link">‡∏´‡∏ô‡πâ‡∏≤ <%= page %> ‡∏à‡∏≤‡∏Å <%= totalPages %></span>
          </li>
          <li class="page-item <%= page>=totalPages ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= page + 1 %>" aria-label="‡∏ñ‡∏±‡∏î‡πÑ‡∏õ">‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí</a>
          </li>
        </ul>
      </nav>
    <% } %>
  </div>
</div>

<script>
  // Mark single notification as read (no success toast)
  async function markAsRead(id) {
    const btn = event.target.closest('button');
    const card = btn.closest('.item');

    btn.disabled = true;
    const oldHTML = btn.innerHTML;
    btn.innerHTML = '<span class="loading" aria-hidden="true"></span>';

    try {
      const r = await fetch(`/notifications/${id}/read`, { method: 'POST' });
      const data = await r.json();

      if (data.ok) {
        card.classList.remove('unread');
        card.dataset.read = 'true';
        btn.parentElement.innerHTML = `
          <span class="status-read" aria-label="‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß">
            <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
          </span>
        `;
        await refreshUnreadBadge();
      } else {
        btn.disabled = false;
        btn.innerHTML = oldHTML;
        showError('‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (e) {
      btn.disabled = false;
      btn.innerHTML = oldHTML;
      showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
  }

  // Mark all notifications as read (no success toast; keep confirm)
  async function markAllAsRead() {
    const btn = document.getElementById('markAllBtn');
    if (btn.disabled) return;
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;

    btn.disabled = true;
    const oldText = btn.innerHTML;
    btn.innerHTML = '<span class="loading" aria-hidden="true"></span> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...';

    try {
      const r = await fetch('/notifications/mark-all-read', { method: 'POST' });
      const data = await r.json();
      if (data.ok) {
        // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÉ‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        window.location.reload();
      } else {
        btn.disabled = false;
        btn.innerHTML = oldText;
        showError('‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (e) {
      btn.disabled = false;
      btn.innerHTML = oldText;
      showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
  }

  // Filter notifications
  function filterNotifications(type) {
    const cards = document.querySelectorAll('.notifications-view .item');
    const chips = document.querySelectorAll('.notifications-view .filter-chip');

    chips.forEach(c => c.classList.remove('active'));
    event.target.closest('.filter-chip').classList.add('active');

    cards.forEach(card => {
      const isRead = card.dataset.read === 'true';
      if (type === 'all') card.style.display = '';
      else if (type === 'unread' && !isRead) card.style.display = '';
      else if (type === 'read' && isRead) card.style.display = '';
      else card.style.display = 'none';
    });
  }

  // Refresh unread badge (navbar + counters)
  async function refreshUnreadBadge() {
    try {
      const r = await fetch('/notifications/unread-count', { headers: { 'Accept': 'application/json' } });
      const data = await r.json();

      const unreadCountEl = document.getElementById('unreadCount');
      const readCountEl = document.getElementById('readCount');
      const allCountEl = document.getElementById('allCount');

      if (unreadCountEl) unreadCountEl.textContent = data.unread;
      if (readCountEl) {
        const total = parseInt(allCountEl.textContent);
        readCountEl.textContent = Math.max(total - data.unread, 0);
      }

      // navbar badge ‡πÉ‡∏ô partials/navbar.ejs
      const badge = document.querySelector('.notification-icon .noti-badge');
      if (badge) badge.textContent = data.unread;

      // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const markAllBtn = document.getElementById('markAllBtn');
      if (markAllBtn) markAllBtn.disabled = data.unread === 0;
    } catch (e) {
      // ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÑ‡∏ß‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      console.error('Failed to refresh badge:', e);
    }
  }

  // Minimal error toast (show only on error)
  function showError(message) {
    const div = document.createElement('div');
    div.style.cssText = `
      position: fixed; top: 20px; right: 20px; padding: .75rem 1rem; border-radius: .5rem;
      font-weight: 600; z-index: 9999; background: #ef4444; color: #fff; box-shadow: var(--nv-shadow);
    `;
    div.textContent = message;
    document.body.appendChild(div);
    setTimeout(() => div.remove(), 2500);
  }
</script>

<%
  // Helper functions
  function getIconType(type) {
    const typeMap = { '‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°':'form', '‡∏£‡∏∞‡∏ö‡∏ö':'system', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢':'security', '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®':'announcement', '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô':'reminder' };
    return typeMap[type] || 'system';
  }
  function getIconSVG(type) {
    const icons = {
      '‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°': '<svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>',
      '‡∏£‡∏∞‡∏ö‡∏ö': '<svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>',
      'default': '<svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>'
    };
    return icons[type] || icons.default;
  }
  function formatDate(date) {
    return new Date(date).toLocaleString('th-TH',{ year:'numeric', month:'long', day:'numeric', hour:'2-digit', minute:'2-digit' });
  }
%>
